{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        }
      ],
      "name": "CertificateCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "CertificateTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IDiamondCertificate.CertificateStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "StatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CERTIFIER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CUTTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANUFACTURER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        }
      ],
      "name": "createCertificate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "certificateId",
          "type": "uint256"
        }
      ],
      "name": "getCertificateDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "currentOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        },
        {
          "internalType": "enum IDiamondCertificate.CertificateStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isTransferable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "certificateId",
          "type": "uint256"
        }
      ],
      "name": "getCertificateHistory",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "timestamps",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        },
        {
          "internalType": "enum IDiamondCertificate.CertificateStatus[]",
          "name": "statuses",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "ipfsHashes",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "roles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "certificateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferCertificate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "certificateId",
          "type": "uint256"
        },
        {
          "internalType": "enum IDiamondCertificate.CertificateStatus",
          "name": "newStatus",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "newIpfsHash",
          "type": "string"
        }
      ],
      "name": "updateStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ad6ec5a84b79d8ef877764834f731e080ccb4570c76b21bb7fd3b796b5a6d5f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1476849",
    "logsBloom": "0x
    "blockHash": "0xdd36f8b445a30d4af11eb3ca4d62c8ea2593335dd2dbc129aceec8a302db3dea",
    "transactionHash": "0x5ad6ec5a84b79d8ef877764834f731e080ccb4570c76b21bb7fd3b796b5a6d5f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x5ad6ec5a84b79d8ef877764834f731e080ccb4570c76b21bb7fd3b796b5a6d5f",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdd36f8b445a30d4af11eb3ca4d62c8ea2593335dd2dbc129aceec8a302db3dea"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "1476849",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b6e6b8f6641eb0ffb5cf600e6ff2e61a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"CertificateCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CertificateTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IDiamondCertificate.CertificateStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CERTIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUTTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANUFACTURER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"createCertificate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"}],\"name\":\"getCertificateDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"enum IDiamondCertificate.CertificateStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTransferable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"}],\"name\":\"getCertificateHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"},{\"internalType\":\"enum IDiamondCertificate.CertificateStatus[]\",\"name\":\"statuses\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"ipfsHashes\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferCertificate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"},{\"internalType\":\"enum IDiamondCertificate.CertificateStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"newIpfsHash\",\"type\":\"string\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DiamondCertificate.sol\":\"DiamondCertificate\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/DiamondCertificate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"./interfaces/IDiamondCertificate.sol\\\";\\r\\nimport \\\"./access/RoleManager.sol\\\";\\r\\nimport \\\"./storage/CertificateStorage.sol\\\";\\r\\n\\r\\ncontract DiamondCertificate is IDiamondCertificate, RoleManager, CertificateStorage {\\r\\n    constructor() RoleManager() {\\r\\n        _nextCertificateId = 1;\\r\\n    }\\r\\n\\r\\n    function createCertificate(string memory ipfsHash) external override whenNotPaused returns (uint256) {\\r\\n        require(hasRole(MANUFACTURER_ROLE, msg.sender), \\\"Only manufacturer can create\\\");\\r\\n        \\r\\n        uint256 newId = _nextCertificateId++;\\r\\n        Certificate storage cert = _certificates[newId];\\r\\n        cert.id = newId;\\r\\n        cert.currentOwner = msg.sender;\\r\\n        cert.ipfsHash = ipfsHash;\\r\\n        cert.status = CertificateStatus.Created;\\r\\n        cert.statusSignatures[uint(CertificateStatus.Created)] = msg.sender;\\r\\n        cert.isTransferable = false;\\r\\n\\r\\n        _addToHistory(newId, msg.sender, CertificateStatus.Created, ipfsHash);\\r\\n        emit CertificateCreated(newId, ipfsHash);\\r\\n        return newId;\\r\\n    }\\r\\n\\r\\n    function updateStatus(\\r\\n        uint256 certificateId, \\r\\n        CertificateStatus newStatus, \\r\\n        string memory newIpfsHash\\r\\n    ) external override whenNotPaused {\\r\\n        Certificate storage cert = _certificates[certificateId];\\r\\n        require(cert.id != 0, \\\"Certificate does not exist\\\");\\r\\n        require(uint(newStatus) == uint(cert.status) + 1, \\\"Invalid status transition\\\");\\r\\n        require(_canUpdateStatus(msg.sender, newStatus), \\\"Unauthorized\\\");\\r\\n        \\r\\n        cert.status = newStatus;\\r\\n        cert.ipfsHash = newIpfsHash;\\r\\n        cert.statusSignatures[uint(newStatus)] = msg.sender;\\r\\n        \\r\\n        _addToHistory(certificateId, msg.sender, newStatus, newIpfsHash);\\r\\n        \\r\\n        if (newStatus == CertificateStatus.Sold) {\\r\\n            cert.isTransferable = true;\\r\\n        }\\r\\n        \\r\\n        emit StatusUpdated(certificateId, newStatus);\\r\\n    }\\r\\n\\r\\n    function transferCertificate(uint256 certificateId, address to) external override whenNotPaused {\\r\\n        Certificate storage cert = _certificates[certificateId];\\r\\n        require(cert.currentOwner == msg.sender, \\\"Not the owner\\\");\\r\\n        require(cert.isTransferable, \\\"Certificate not transferable\\\");\\r\\n        require(to != address(0), \\\"Invalid recipient\\\");\\r\\n\\r\\n        cert.currentOwner = to;\\r\\n        emit CertificateTransferred(certificateId, msg.sender, to);\\r\\n    }\\r\\n\\r\\n    function getCertificateDetails(uint256 certificateId) \\r\\n        external \\r\\n        view \\r\\n        override\\r\\n        returns (\\r\\n            address currentOwner,\\r\\n            string memory ipfsHash,\\r\\n            CertificateStatus status,\\r\\n            bool isTransferable\\r\\n        ) \\r\\n    {\\r\\n        Certificate storage cert = _certificates[certificateId];\\r\\n        require(cert.id != 0, \\\"Certificate does not exist\\\");\\r\\n        \\r\\n        return (\\r\\n            cert.currentOwner,\\r\\n            cert.ipfsHash,\\r\\n            cert.status,\\r\\n            cert.isTransferable\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // \\u6682\\u505c\\u548c\\u6062\\u590d\\u529f\\u80fd\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function getCertificateHistory(uint256 certificateId) \\r\\n        external \\r\\n        view \\r\\n        override\\r\\n        returns (\\r\\n            uint256[] memory timestamps,\\r\\n            address[] memory operators,\\r\\n            CertificateStatus[] memory statuses,\\r\\n            string[] memory ipfsHashes\\r\\n        ) \\r\\n    {\\r\\n        StatusHistory[] storage history = _certificateHistory[certificateId];\\r\\n        uint256 length = history.length;\\r\\n        \\r\\n        timestamps = new uint256[](length);\\r\\n        operators = new address[](length);\\r\\n        statuses = new CertificateStatus[](length);\\r\\n        ipfsHashes = new string[](length);\\r\\n        \\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            timestamps[i] = history[i].timestamp;\\r\\n            operators[i] = history[i].operator;\\r\\n            statuses[i] = history[i].status;\\r\\n            ipfsHashes[i] = history[i].ipfsHash;\\r\\n        }\\r\\n        \\r\\n        return (timestamps, operators, statuses, ipfsHashes);\\r\\n    }\\r\\n} \",\"keccak256\":\"0xbea5f677056ffb5af843bcf79cb092fe48d38df7117aab451f5fa01d01453e42\",\"license\":\"MIT\"},\"contracts/access/RoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/IDiamondCertificate.sol\\\";\\r\\n\\r\\ncontract RoleManager is Ownable {\\r\\n    mapping(bytes32 => mapping(address => bool)) public roles;\\r\\n\\r\\n    bytes32 public constant MINER_ROLE = keccak256(\\\"MINER_ROLE\\\");\\r\\n    bytes32 public constant CUTTER_ROLE = keccak256(\\\"CUTTER_ROLE\\\");\\r\\n    bytes32 public constant CERTIFIER_ROLE = keccak256(\\\"CERTIFIER_ROLE\\\");\\r\\n    bytes32 public constant MANUFACTURER_ROLE = keccak256(\\\"MANUFACTURER_ROLE\\\");\\r\\n\\r\\n    constructor() Ownable() {\\r\\n        _setupInitialRoles();\\r\\n    }\\r\\n\\r\\n    function _setupInitialRoles() private {\\r\\n        address deployer = msg.sender;\\r\\n        roles[MINER_ROLE][deployer] = true;\\r\\n        roles[CUTTER_ROLE][deployer] = true;\\r\\n        roles[CERTIFIER_ROLE][deployer] = true;\\r\\n        roles[MANUFACTURER_ROLE][deployer] = true;\\r\\n    }\\r\\n\\r\\n    function grantRole(bytes32 role, address account) external onlyOwner {\\r\\n        roles[role][account] = true;\\r\\n    }\\r\\n\\r\\n    function revokeRole(bytes32 role, address account) external onlyOwner {\\r\\n        roles[role][account] = false;\\r\\n    }\\r\\n\\r\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\r\\n        return roles[role][account];\\r\\n    }\\r\\n\\r\\n    function _canUpdateStatus(address account, IDiamondCertificate.CertificateStatus status) \\r\\n        internal \\r\\n        view \\r\\n        returns (bool) \\r\\n    {\\r\\n        if (status == IDiamondCertificate.CertificateStatus.Mined) {\\r\\n            return hasRole(MINER_ROLE, account);\\r\\n        } else if (status == IDiamondCertificate.CertificateStatus.Cut) {\\r\\n            return hasRole(CUTTER_ROLE, account);\\r\\n        } else if (status == IDiamondCertificate.CertificateStatus.Certified) {\\r\\n            return hasRole(CERTIFIER_ROLE, account);\\r\\n        } else if (status == IDiamondCertificate.CertificateStatus.Manufactured) {\\r\\n            return hasRole(MANUFACTURER_ROLE, account);\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n} \",\"keccak256\":\"0xe3e3d00a82b5b1c4ba1b67fffa72790d71c8acb47c6721ec6bdaf7a7d9ba9650\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCertificate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IDiamondCertificate {\\r\\n    enum CertificateStatus {\\r\\n        Created,\\r\\n        Mined,\\r\\n        Cut,\\r\\n        Certified,\\r\\n        Manufactured,\\r\\n        Sold\\r\\n    }\\r\\n\\r\\n    event CertificateCreated(uint256 indexed id, string ipfsHash);\\r\\n    event StatusUpdated(uint256 indexed id, CertificateStatus status);\\r\\n    event CertificateTransferred(uint256 indexed id, address from, address to);\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account);\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account);\\r\\n\\r\\n    function createCertificate(string memory ipfsHash) external returns (uint256);\\r\\n    function updateStatus(uint256 certificateId, CertificateStatus newStatus, string memory newIpfsHash) external;\\r\\n    function transferCertificate(uint256 certificateId, address to) external;\\r\\n    function getCertificateDetails(uint256 certificateId) external view returns (\\r\\n        address currentOwner,\\r\\n        string memory ipfsHash,\\r\\n        CertificateStatus status,\\r\\n        bool isTransferable\\r\\n    );\\r\\n    function getCertificateHistory(uint256 certificateId) external view returns (\\r\\n        uint256[] memory timestamps,\\r\\n        address[] memory operators,\\r\\n        CertificateStatus[] memory statuses,\\r\\n        string[] memory ipfsHashes\\r\\n    );\\r\\n} \",\"keccak256\":\"0x1a62e63ad3962f8d12e648835c5a6e5f1396fde8133fa47dbd6de4013148ce5c\",\"license\":\"MIT\"},\"contracts/storage/CertificateStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"../interfaces/IDiamondCertificate.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract CertificateStorage is Pausable {\\r\\n    struct Certificate {\\r\\n        uint256 id;\\r\\n        address currentOwner;\\r\\n        string ipfsHash;\\r\\n        IDiamondCertificate.CertificateStatus status;\\r\\n        mapping(uint => address) statusSignatures;\\r\\n        bool isTransferable;\\r\\n    }\\r\\n\\r\\n    struct StatusHistory {\\r\\n        uint256 timestamp;\\r\\n        address operator;\\r\\n        IDiamondCertificate.CertificateStatus status;\\r\\n        string ipfsHash;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Certificate) internal _certificates;\\r\\n    mapping(uint256 => StatusHistory[]) internal _certificateHistory;\\r\\n    uint256 internal _nextCertificateId;\\r\\n\\r\\n    function _addToHistory(\\r\\n        uint256 certificateId,\\r\\n        address operator,\\r\\n        IDiamondCertificate.CertificateStatus status,\\r\\n        string memory ipfsHash\\r\\n    ) internal {\\r\\n        _certificateHistory[certificateId].push(StatusHistory({\\r\\n            timestamp: block.timestamp,\\r\\n            operator: operator,\\r\\n            status: status,\\r\\n            ipfsHash: ipfsHash\\r\\n        }));\\r\\n    }\\r\\n} \",\"keccak256\":\"0x8fe688da3f8715a91d296e6d640834557b4f84b7ed2101e5b817fa9bc5961c9a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a336100ff565b6100eb3360009081527f2ae4843480cc2a15124eacbbbfc33fdea28a24cb93b066a74c889ddd29aea684602090815260408083208054600160ff1991821681179092557f49273a48e49957efeeadab671e924bc6c71324f0b33e1b058fa05cf6a1743ebc845282852080548216831790557f8d719cef24d6d60fcf34471c1fa3b720692a1768de353ed3705ba044d619dc7f845282852080548216831790557f9bf69c02ecb57bec2332bd5ee59fccb5621131eaae23124e1464351ca514c162909352922080549091169091179055565b6002805460ff19169055600160055561014f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61172d8061015e6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638456cb59116100ad578063cf3ae93411610071578063cf3ae93414610290578063d547741f146102a3578063e9e312c0146102b6578063f2fde38b146102d9578063f8fc08b9146102ec57600080fd5b80638456cb59146102105780638da5cb5b1461021857806391d1485414610233578063965288b014610246578063a901fe5e1461026d57600080fd5b806369d0b517116100f457806369d0b51714610194578063715018a6146101bb57806372b65166146101c357806374444882146101ea578063781f0b72146101fd57600080fd5b80632f2ff15d146101265780633f4ba83a1461013b5780635c975abb146101435780636394f6e61461015f575b600080fd5b61013961013436600461118c565b61031a565b005b610139610352565b60025460ff165b60405190151581526020015b60405180910390f35b6101867fa952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7281565b604051908152602001610156565b6101867f65cb1d8422cdf0328f26b49e42e9f4524474c431da623cbe0ea455f1b67c9f7781565b610139610364565b6101867f4056c932e3f2d90f160881892422c8f1255baba3c666a8b8d7904fe3a7c8487281565b6101866101f836600461125b565b610376565b61013961020b366004611298565b6104d2565b6101396106f4565b6000546040516001600160a01b039091168152602001610156565b61014a61024136600461118c565b610704565b6101867feefb95e842a3287179d933b4460be539a1d5af11aa8b325bb45c5c8dc92de4ed81565b61028061027b3660046112f5565b610731565b604051610156949392919061138c565b61013961029e36600461118c565b61085d565b6101396102b136600461118c565b6109be565b6102c96102c43660046112f5565b6109f3565b6040516101569493929190611467565b6101396102e7366004611513565b610d39565b61014a6102fa36600461118c565b600160209081526000928352604080842090915290825290205460ff1681565b610322610db2565b60009182526001602081815260408085206001600160a01b0390941685529290529120805460ff19169091179055565b61035a610db2565b610362610e0c565b565b61036c610db2565b6103626000610e5e565b6000610380610eae565b6103aa7feefb95e842a3287179d933b4460be539a1d5af11aa8b325bb45c5c8dc92de4ed33610704565b6103fb5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c79206d616e7566616374757265722063616e206372656174650000000060448201526064015b60405180910390fd5b600580546000918261040c8361154b565b9091555060008181526003602052604090208181556001810180546001600160a01b031916331790559091506002810161044685826115ed565b5060038101805460ff199081169091556000808052600483016020526040812080546001600160a01b0319163390811790915560058401805490931690925561049191849187610ef4565b817f6bfbe1b361bd87808c4c58733955f81c593d11950aff897e6968ab160b6ffa5f856040516104c191906116ad565b60405180910390a25090505b919050565b6104da610eae565b600083815260036020526040812080549091036105395760405162461bcd60e51b815260206004820152601a60248201527f436572746966696361746520646f6573206e6f7420657869737400000000000060448201526064016103f2565b600381015460ff16600581111561055257610552611354565b61055d9060016116c0565b83600581111561056f5761056f611354565b146105bc5760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420737461747573207472616e736974696f6e0000000000000060448201526064016103f2565b6105c63384610fd1565b6106015760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b60448201526064016103f2565b60038101805484919060ff1916600183600581111561062257610622611354565b02179055506002810161063583826115ed565b503381600401600085600581111561064f5761064f611354565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061068d84338585610ef4565b60058360058111156106a1576106a1611354565b036106b65760058101805460ff191660011790555b837f2da7b23ca63c1eb969eee5fae4acb98186abecf5358b0354a82a5183ebca6b2a846040516106e691906116d3565b60405180910390a250505050565b6106fc610db2565b6103626110ef565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b60008181526003602052604081208054606091839182919082036107975760405162461bcd60e51b815260206004820152601a60248201527f436572746966696361746520646f6573206e6f7420657869737400000000000060448201526064016103f2565b6001810154600382015460058301546002840180546001600160a01b0390941693909260ff90811692169083906107cd90611564565b80601f01602080910402602001604051908101604052809291908181526020018280546107f990611564565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b505050505092509450945094509450509193509193565b610865610eae565b600082815260036020526040902060018101546001600160a01b031633146108bf5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b60448201526064016103f2565b600581015460ff166109135760405162461bcd60e51b815260206004820152601c60248201527f4365727469666963617465206e6f74207472616e7366657261626c650000000060448201526064016103f2565b6001600160a01b03821661095d5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b60448201526064016103f2565b6001810180546001600160a01b0319166001600160a01b03841690811790915560408051338152602081019290925284917fd84c3130800c565a28647462f31ae56192e38229e38ffefbea7cda3be2968bdf910160405180910390a2505050565b6109c6610db2565b60009182526001602090815260408084206001600160a01b0390931684529190529020805460ff19169055565b600081815260046020526040902080546060918291829182918067ffffffffffffffff811115610a2557610a256111b8565b604051908082528060200260200182016040528015610a4e578160200160208202803683370190505b5095508067ffffffffffffffff811115610a6a57610a6a6111b8565b604051908082528060200260200182016040528015610a93578160200160208202803683370190505b5094508067ffffffffffffffff811115610aaf57610aaf6111b8565b604051908082528060200260200182016040528015610ad8578160200160208202803683370190505b5093508067ffffffffffffffff811115610af457610af46111b8565b604051908082528060200260200182016040528015610b2757816020015b6060815260200190600190039081610b125790505b50925060005b81811015610d2f57828181548110610b4757610b476116e1565b906000526020600020906003020160000154878281518110610b6b57610b6b6116e1565b602002602001018181525050828181548110610b8957610b896116e1565b906000526020600020906003020160010160009054906101000a90046001600160a01b0316868281518110610bc057610bc06116e1565b60200260200101906001600160a01b031690816001600160a01b031681525050828181548110610bf257610bf26116e1565b906000526020600020906003020160010160149054906101000a900460ff16858281518110610c2357610c236116e1565b60200260200101906005811115610c3c57610c3c611354565b90816005811115610c4f57610c4f611354565b81525050828181548110610c6557610c656116e1565b90600052602060002090600302016002018054610c8190611564565b80601f0160208091040260200160405190810160405280929190818152602001828054610cad90611564565b8015610cfa5780601f10610ccf57610100808354040283529160200191610cfa565b820191906000526020600020905b815481529060010190602001808311610cdd57829003601f168201915b5050505050848281518110610d1157610d116116e1565b60200260200101819052508080610d279061154b565b915050610b2d565b5050509193509193565b610d41610db2565b6001600160a01b038116610da65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f2565b610daf81610e5e565b50565b6000546001600160a01b031633146103625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f2565b610e1461112c565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60025460ff16156103625760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103f2565b600460008581526020019081526020016000206040518060800160405280428152602001856001600160a01b03168152602001846005811115610f3957610f39611354565b8152602090810184905282546001818101855560009485529382902083516003909202019081559082015192810180546001600160a01b039094166001600160a01b0319851681178255604084015193949293926001600160a81b03191617600160a01b836005811115610faf57610faf611354565b021790555060608201516002820190610fc890826115ed565b50505050505050565b60006001826005811115610fe757610fe7611354565b0361101d576110167fa952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7284610704565b905061072b565b600282600581111561103157611031611354565b03611060576110167f4056c932e3f2d90f160881892422c8f1255baba3c666a8b8d7904fe3a7c8487284610704565b600382600581111561107457611074611354565b036110a3576110167f65cb1d8422cdf0328f26b49e42e9f4524474c431da623cbe0ea455f1b67c9f7784610704565b60048260058111156110b7576110b7611354565b036110e6576110167feefb95e842a3287179d933b4460be539a1d5af11aa8b325bb45c5c8dc92de4ed84610704565b50600092915050565b6110f7610eae565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e413390565b60025460ff166103625760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103f2565b80356001600160a01b03811681146104cd57600080fd5b6000806040838503121561119f57600080fd5b823591506111af60208401611175565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126111df57600080fd5b813567ffffffffffffffff808211156111fa576111fa6111b8565b604051601f8301601f19908116603f01168101908282118183101715611222576112226111b8565b8160405283815286602085880101111561123b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561126d57600080fd5b813567ffffffffffffffff81111561128457600080fd5b611290848285016111ce565b949350505050565b6000806000606084860312156112ad57600080fd5b833592506020840135600681106112c357600080fd5b9150604084013567ffffffffffffffff8111156112df57600080fd5b6112eb868287016111ce565b9150509250925092565b60006020828403121561130757600080fd5b5035919050565b6000815180845260005b8181101561133457602081850181015186830182015201611318565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b6006811061138857634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b03851681526080602082018190526000906113b09083018661130e565b90506113bf604083018561136a565b821515606083015295945050505050565b600081518084526020808501945080840160005b83811015611407576113f787835161136a565b95820195908201906001016113e4565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561145a57828403895261144884835161130e565b98850198935090840190600101611430565b5091979650505050505050565b6080808252855190820181905260009060209060a0840190828901845b828110156114a057815184529284019290840190600101611484565b5050508381038285015286518082528783019183019060005b818110156114de5783516001600160a01b0316835292840192918401916001016114b9565b505084810360408601526114f281886113d0565b9250505082810360608401526115088185611412565b979650505050505050565b60006020828403121561152557600080fd5b61152e82611175565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161155d5761155d611535565b5060010190565b600181811c9082168061157857607f821691505b60208210810361159857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156115e857600081815260208120601f850160051c810160208610156115c55750805b601f850160051c820191505b818110156115e4578281556001016115d1565b5050505b505050565b815167ffffffffffffffff811115611607576116076111b8565b61161b816116158454611564565b8461159e565b602080601f83116001811461165057600084156116385750858301515b600019600386901b1c1916600185901b1785556115e4565b600085815260208120601f198616915b8281101561167f57888601518255948401946001909101908401611660565b508582101561169d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600061152e602083018461130e565b8082018082111561072b5761072b611535565b6020810161072b828461136a565b634e487b7160e01b600052603260045260246000fdfea26469706673582212205da0aacc41ca080eb582c85cc5577b6b680d855c2a404d71562ecfe7315de8d964736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80638456cb59116100ad578063cf3ae93411610071578063cf3ae93414610290578063d547741f146102a3578063e9e312c0146102b6578063f2fde38b146102d9578063f8fc08b9146102ec57600080fd5b80638456cb59146102105780638da5cb5b1461021857806391d1485414610233578063965288b014610246578063a901fe5e1461026d57600080fd5b806369d0b517116100f457806369d0b51714610194578063715018a6146101bb57806372b65166146101c357806374444882146101ea578063781f0b72146101fd57600080fd5b80632f2ff15d146101265780633f4ba83a1461013b5780635c975abb146101435780636394f6e61461015f575b600080fd5b61013961013436600461118c565b61031a565b005b610139610352565b60025460ff165b60405190151581526020015b60405180910390f35b6101867fa952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7281565b604051908152602001610156565b6101867f65cb1d8422cdf0328f26b49e42e9f4524474c431da623cbe0ea455f1b67c9f7781565b610139610364565b6101867f4056c932e3f2d90f160881892422c8f1255baba3c666a8b8d7904fe3a7c8487281565b6101866101f836600461125b565b610376565b61013961020b366004611298565b6104d2565b6101396106f4565b6000546040516001600160a01b039091168152602001610156565b61014a61024136600461118c565b610704565b6101867feefb95e842a3287179d933b4460be539a1d5af11aa8b325bb45c5c8dc92de4ed81565b61028061027b3660046112f5565b610731565b604051610156949392919061138c565b61013961029e36600461118c565b61085d565b6101396102b136600461118c565b6109be565b6102c96102c43660046112f5565b6109f3565b6040516101569493929190611467565b6101396102e7366004611513565b610d39565b61014a6102fa36600461118c565b600160209081526000928352604080842090915290825290205460ff1681565b610322610db2565b60009182526001602081815260408085206001600160a01b0390941685529290529120805460ff19169091179055565b61035a610db2565b610362610e0c565b565b61036c610db2565b6103626000610e5e565b6000610380610eae565b6103aa7feefb95e842a3287179d933b4460be539a1d5af11aa8b325bb45c5c8dc92de4ed33610704565b6103fb5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c79206d616e7566616374757265722063616e206372656174650000000060448201526064015b60405180910390fd5b600580546000918261040c8361154b565b9091555060008181526003602052604090208181556001810180546001600160a01b031916331790559091506002810161044685826115ed565b5060038101805460ff199081169091556000808052600483016020526040812080546001600160a01b0319163390811790915560058401805490931690925561049191849187610ef4565b817f6bfbe1b361bd87808c4c58733955f81c593d11950aff897e6968ab160b6ffa5f856040516104c191906116ad565b60405180910390a25090505b919050565b6104da610eae565b600083815260036020526040812080549091036105395760405162461bcd60e51b815260206004820152601a60248201527f436572746966696361746520646f6573206e6f7420657869737400000000000060448201526064016103f2565b600381015460ff16600581111561055257610552611354565b61055d9060016116c0565b83600581111561056f5761056f611354565b146105bc5760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420737461747573207472616e736974696f6e0000000000000060448201526064016103f2565b6105c63384610fd1565b6106015760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b60448201526064016103f2565b60038101805484919060ff1916600183600581111561062257610622611354565b02179055506002810161063583826115ed565b503381600401600085600581111561064f5761064f611354565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061068d84338585610ef4565b60058360058111156106a1576106a1611354565b036106b65760058101805460ff191660011790555b837f2da7b23ca63c1eb969eee5fae4acb98186abecf5358b0354a82a5183ebca6b2a846040516106e691906116d3565b60405180910390a250505050565b6106fc610db2565b6103626110ef565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b60008181526003602052604081208054606091839182919082036107975760405162461bcd60e51b815260206004820152601a60248201527f436572746966696361746520646f6573206e6f7420657869737400000000000060448201526064016103f2565b6001810154600382015460058301546002840180546001600160a01b0390941693909260ff90811692169083906107cd90611564565b80601f01602080910402602001604051908101604052809291908181526020018280546107f990611564565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b505050505092509450945094509450509193509193565b610865610eae565b600082815260036020526040902060018101546001600160a01b031633146108bf5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b60448201526064016103f2565b600581015460ff166109135760405162461bcd60e51b815260206004820152601c60248201527f4365727469666963617465206e6f74207472616e7366657261626c650000000060448201526064016103f2565b6001600160a01b03821661095d5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b60448201526064016103f2565b6001810180546001600160a01b0319166001600160a01b03841690811790915560408051338152602081019290925284917fd84c3130800c565a28647462f31ae56192e38229e38ffefbea7cda3be2968bdf910160405180910390a2505050565b6109c6610db2565b60009182526001602090815260408084206001600160a01b0390931684529190529020805460ff19169055565b600081815260046020526040902080546060918291829182918067ffffffffffffffff811115610a2557610a256111b8565b604051908082528060200260200182016040528015610a4e578160200160208202803683370190505b5095508067ffffffffffffffff811115610a6a57610a6a6111b8565b604051908082528060200260200182016040528015610a93578160200160208202803683370190505b5094508067ffffffffffffffff811115610aaf57610aaf6111b8565b604051908082528060200260200182016040528015610ad8578160200160208202803683370190505b5093508067ffffffffffffffff811115610af457610af46111b8565b604051908082528060200260200182016040528015610b2757816020015b6060815260200190600190039081610b125790505b50925060005b81811015610d2f57828181548110610b4757610b476116e1565b906000526020600020906003020160000154878281518110610b6b57610b6b6116e1565b602002602001018181525050828181548110610b8957610b896116e1565b906000526020600020906003020160010160009054906101000a90046001600160a01b0316868281518110610bc057610bc06116e1565b60200260200101906001600160a01b031690816001600160a01b031681525050828181548110610bf257610bf26116e1565b906000526020600020906003020160010160149054906101000a900460ff16858281518110610c2357610c236116e1565b60200260200101906005811115610c3c57610c3c611354565b90816005811115610c4f57610c4f611354565b81525050828181548110610c6557610c656116e1565b90600052602060002090600302016002018054610c8190611564565b80601f0160208091040260200160405190810160405280929190818152602001828054610cad90611564565b8015610cfa5780601f10610ccf57610100808354040283529160200191610cfa565b820191906000526020600020905b815481529060010190602001808311610cdd57829003601f168201915b5050505050848281518110610d1157610d116116e1565b60200260200101819052508080610d279061154b565b915050610b2d565b5050509193509193565b610d41610db2565b6001600160a01b038116610da65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f2565b610daf81610e5e565b50565b6000546001600160a01b031633146103625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f2565b610e1461112c565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60025460ff16156103625760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103f2565b600460008581526020019081526020016000206040518060800160405280428152602001856001600160a01b03168152602001846005811115610f3957610f39611354565b8152602090810184905282546001818101855560009485529382902083516003909202019081559082015192810180546001600160a01b039094166001600160a01b0319851681178255604084015193949293926001600160a81b03191617600160a01b836005811115610faf57610faf611354565b021790555060608201516002820190610fc890826115ed565b50505050505050565b60006001826005811115610fe757610fe7611354565b0361101d576110167fa952726ef2588ad078edf35b066f7c7406e207cb0003bbaba8cb53eba9553e7284610704565b905061072b565b600282600581111561103157611031611354565b03611060576110167f4056c932e3f2d90f160881892422c8f1255baba3c666a8b8d7904fe3a7c8487284610704565b600382600581111561107457611074611354565b036110a3576110167f65cb1d8422cdf0328f26b49e42e9f4524474c431da623cbe0ea455f1b67c9f7784610704565b60048260058111156110b7576110b7611354565b036110e6576110167feefb95e842a3287179d933b4460be539a1d5af11aa8b325bb45c5c8dc92de4ed84610704565b50600092915050565b6110f7610eae565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e413390565b60025460ff166103625760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103f2565b80356001600160a01b03811681146104cd57600080fd5b6000806040838503121561119f57600080fd5b823591506111af60208401611175565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126111df57600080fd5b813567ffffffffffffffff808211156111fa576111fa6111b8565b604051601f8301601f19908116603f01168101908282118183101715611222576112226111b8565b8160405283815286602085880101111561123b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561126d57600080fd5b813567ffffffffffffffff81111561128457600080fd5b611290848285016111ce565b949350505050565b6000806000606084860312156112ad57600080fd5b833592506020840135600681106112c357600080fd5b9150604084013567ffffffffffffffff8111156112df57600080fd5b6112eb868287016111ce565b9150509250925092565b60006020828403121561130757600080fd5b5035919050565b6000815180845260005b8181101561133457602081850181015186830182015201611318565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b6006811061138857634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b03851681526080602082018190526000906113b09083018661130e565b90506113bf604083018561136a565b821515606083015295945050505050565b600081518084526020808501945080840160005b83811015611407576113f787835161136a565b95820195908201906001016113e4565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561145a57828403895261144884835161130e565b98850198935090840190600101611430565b5091979650505050505050565b6080808252855190820181905260009060209060a0840190828901845b828110156114a057815184529284019290840190600101611484565b5050508381038285015286518082528783019183019060005b818110156114de5783516001600160a01b0316835292840192918401916001016114b9565b505084810360408601526114f281886113d0565b9250505082810360608401526115088185611412565b979650505050505050565b60006020828403121561152557600080fd5b61152e82611175565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161155d5761155d611535565b5060010190565b600181811c9082168061157857607f821691505b60208210810361159857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156115e857600081815260208120601f850160051c810160208610156115c55750805b601f850160051c820191505b818110156115e4578281556001016115d1565b5050505b505050565b815167ffffffffffffffff811115611607576116076111b8565b61161b816116158454611564565b8461159e565b602080601f83116001811461165057600084156116385750858301515b600019600386901b1c1916600185901b1785556115e4565b600085815260208120601f198616915b8281101561167f57888601518255948401946001909101908401611660565b508582101561169d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600061152e602083018461130e565b8082018082111561072b5761072b611535565b6020810161072b828461136a565b634e487b7160e01b600052603260045260246000fdfea26469706673582212205da0aacc41ca080eb582c85cc5577b6b680d855c2a404d71562ecfe7315de8d964736f6c63430008130033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 716,
        "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
        "label": "roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 130,
        "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1037,
        "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
        "label": "_certificates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Certificate)1022_storage)"
      },
      {
        "astId": 1043,
        "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
        "label": "_certificateHistory",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_struct(StatusHistory)1032_storage)dyn_storage)"
      },
      {
        "astId": 1045,
        "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
        "label": "_nextCertificateId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StatusHistory)1032_storage)dyn_storage": {
        "base": "t_struct(StatusHistory)1032_storage",
        "encoding": "dynamic_array",
        "label": "struct CertificateStorage.StatusHistory[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(CertificateStatus)909": {
        "encoding": "inplace",
        "label": "enum IDiamondCertificate.CertificateStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(StatusHistory)1032_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CertificateStorage.StatusHistory[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(StatusHistory)1032_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Certificate)1022_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CertificateStorage.Certificate)",
        "numberOfBytes": "32",
        "value": "t_struct(Certificate)1022_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Certificate)1022_storage": {
        "encoding": "inplace",
        "label": "struct CertificateStorage.Certificate",
        "members": [
          {
            "astId": 1008,
            "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1010,
            "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
            "label": "currentOwner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1012,
            "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1015,
            "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(CertificateStatus)909"
          },
          {
            "astId": 1019,
            "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
            "label": "statusSignatures",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 1021,
            "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
            "label": "isTransferable",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(StatusHistory)1032_storage": {
        "encoding": "inplace",
        "label": "struct CertificateStorage.StatusHistory",
        "members": [
          {
            "astId": 1024,
            "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1026,
            "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
            "label": "operator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1029,
            "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
            "label": "status",
            "offset": 20,
            "slot": "1",
            "type": "t_enum(CertificateStatus)909"
          },
          {
            "astId": 1031,
            "contract": "contracts/DiamondCertificate.sol:DiamondCertificate",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}