{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/access/RoleManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IDiamondCertificate.sol\";\n\ncontract RoleManager is Ownable {\n    mapping(bytes32 => mapping(address => bool)) public roles;\n\n    bytes32 public constant MINER_ROLE = keccak256(\"MINER_ROLE\");\n    bytes32 public constant CUTTER_ROLE = keccak256(\"CUTTER_ROLE\");\n    bytes32 public constant CERTIFIER_ROLE = keccak256(\"CERTIFIER_ROLE\");\n    bytes32 public constant MANUFACTURER_ROLE = keccak256(\"MANUFACTURER_ROLE\");\n\n    constructor() Ownable() {\n        _setupInitialRoles();\n    }\n\n    function _setupInitialRoles() private {\n        address deployer = msg.sender;\n        roles[MINER_ROLE][deployer] = true;\n        roles[CUTTER_ROLE][deployer] = true;\n        roles[CERTIFIER_ROLE][deployer] = true;\n        roles[MANUFACTURER_ROLE][deployer] = true;\n    }\n\n    function grantRole(bytes32 role, address account) external onlyOwner {\n        roles[role][account] = true;\n    }\n\n    function revokeRole(bytes32 role, address account) external onlyOwner {\n        roles[role][account] = false;\n    }\n\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return roles[role][account];\n    }\n\n    function _canUpdateStatus(address account, IDiamondCertificate.CertificateStatus status) \n        internal \n        view \n        returns (bool) \n    {\n        if (status == IDiamondCertificate.CertificateStatus.Mined) {\n            return hasRole(MINER_ROLE, account);\n        } else if (status == IDiamondCertificate.CertificateStatus.Cut) {\n            return hasRole(CUTTER_ROLE, account);\n        } else if (status == IDiamondCertificate.CertificateStatus.Certified) {\n            return hasRole(CERTIFIER_ROLE, account);\n        } else if (status == IDiamondCertificate.CertificateStatus.Manufactured) {\n            return hasRole(MANUFACTURER_ROLE, account);\n        }\n        return false;\n    }\n} "
    },
    "contracts/DiamondCertificate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"./interfaces/IDiamondCertificate.sol\";\nimport \"./access/RoleManager.sol\";\nimport \"./storage/CertificateStorage.sol\";\n\ncontract DiamondCertificate is IDiamondCertificate, RoleManager, CertificateStorage {\n    constructor() RoleManager() {\n        _nextCertificateId = 1;\n    }\n\n    function createCertificate(string memory ipfsHash) external override whenNotPaused returns (uint256) {\n        require(hasRole(MANUFACTURER_ROLE, msg.sender), \"Only manufacturer can create\");\n        \n        uint256 newId = _nextCertificateId++;\n        Certificate storage cert = _certificates[newId];\n        cert.id = newId;\n        cert.currentOwner = msg.sender;\n        cert.ipfsHash = ipfsHash;\n        cert.status = CertificateStatus.Created;\n        cert.statusSignatures[uint(CertificateStatus.Created)] = msg.sender;\n        cert.isTransferable = false;\n\n        _addToHistory(newId, msg.sender, CertificateStatus.Created, ipfsHash);\n        emit CertificateCreated(newId, ipfsHash);\n        return newId;\n    }\n\n    function updateStatus(\n        uint256 certificateId, \n        CertificateStatus newStatus, \n        string memory newIpfsHash\n    ) external override whenNotPaused {\n        Certificate storage cert = _certificates[certificateId];\n        require(cert.id != 0, \"Certificate does not exist\");\n        require(uint(newStatus) == uint(cert.status) + 1, \"Invalid status transition\");\n        require(_canUpdateStatus(msg.sender, newStatus), \"Unauthorized\");\n        \n        cert.status = newStatus;\n        cert.ipfsHash = newIpfsHash;\n        cert.statusSignatures[uint(newStatus)] = msg.sender;\n        \n        _addToHistory(certificateId, msg.sender, newStatus, newIpfsHash);\n        \n        if (newStatus == CertificateStatus.Sold) {\n            cert.isTransferable = true;\n        }\n        \n        emit StatusUpdated(certificateId, newStatus);\n    }\n\n    function transferCertificate(uint256 certificateId, address to) external override whenNotPaused {\n        Certificate storage cert = _certificates[certificateId];\n        require(cert.currentOwner == msg.sender, \"Not the owner\");\n        require(cert.isTransferable, \"Certificate not transferable\");\n        require(to != address(0), \"Invalid recipient\");\n\n        cert.currentOwner = to;\n        emit CertificateTransferred(certificateId, msg.sender, to);\n    }\n\n    function getCertificateDetails(uint256 certificateId) \n        external \n        view \n        override\n        returns (\n            address currentOwner,\n            string memory ipfsHash,\n            CertificateStatus status,\n            bool isTransferable\n        ) \n    {\n        Certificate storage cert = _certificates[certificateId];\n        require(cert.id != 0, \"Certificate does not exist\");\n        \n        return (\n            cert.currentOwner,\n            cert.ipfsHash,\n            cert.status,\n            cert.isTransferable\n        );\n    }\n\n    // 暂停和恢复功能\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function getCertificateHistory(uint256 certificateId) \n        external \n        view \n        override\n        returns (\n            uint256[] memory timestamps,\n            address[] memory operators,\n            CertificateStatus[] memory statuses,\n            string[] memory ipfsHashes\n        ) \n    {\n        StatusHistory[] storage history = _certificateHistory[certificateId];\n        uint256 length = history.length;\n        \n        timestamps = new uint256[](length);\n        operators = new address[](length);\n        statuses = new CertificateStatus[](length);\n        ipfsHashes = new string[](length);\n        \n        for (uint256 i = 0; i < length; i++) {\n            timestamps[i] = history[i].timestamp;\n            operators[i] = history[i].operator;\n            statuses[i] = history[i].status;\n            ipfsHashes[i] = history[i].ipfsHash;\n        }\n        \n        return (timestamps, operators, statuses, ipfsHashes);\n    }\n} "
    },
    "contracts/interfaces/IDiamondCertificate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IDiamondCertificate {\n    enum CertificateStatus {\n        Created,\n        Mined,\n        Cut,\n        Certified,\n        Manufactured,\n        Sold\n    }\n\n    event CertificateCreated(uint256 indexed id, string ipfsHash);\n    event StatusUpdated(uint256 indexed id, CertificateStatus status);\n    event CertificateTransferred(uint256 indexed id, address from, address to);\n    event RoleGranted(bytes32 indexed role, address indexed account);\n    event RoleRevoked(bytes32 indexed role, address indexed account);\n\n    function createCertificate(string memory ipfsHash) external returns (uint256);\n    function updateStatus(uint256 certificateId, CertificateStatus newStatus, string memory newIpfsHash) external;\n    function transferCertificate(uint256 certificateId, address to) external;\n    function getCertificateDetails(uint256 certificateId) external view returns (\n        address currentOwner,\n        string memory ipfsHash,\n        CertificateStatus status,\n        bool isTransferable\n    );\n    function getCertificateHistory(uint256 certificateId) external view returns (\n        uint256[] memory timestamps,\n        address[] memory operators,\n        CertificateStatus[] memory statuses,\n        string[] memory ipfsHashes\n    );\n} "
    },
    "contracts/storage/CertificateStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"../interfaces/IDiamondCertificate.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract CertificateStorage is Pausable {\n    struct Certificate {\n        uint256 id;\n        address currentOwner;\n        string ipfsHash;\n        IDiamondCertificate.CertificateStatus status;\n        mapping(uint => address) statusSignatures;\n        bool isTransferable;\n    }\n\n    struct StatusHistory {\n        uint256 timestamp;\n        address operator;\n        IDiamondCertificate.CertificateStatus status;\n        string ipfsHash;\n    }\n\n    mapping(uint256 => Certificate) internal _certificates;\n    mapping(uint256 => StatusHistory[]) internal _certificateHistory;\n    uint256 internal _nextCertificateId;\n\n    function _addToHistory(\n        uint256 certificateId,\n        address operator,\n        IDiamondCertificate.CertificateStatus status,\n        string memory ipfsHash\n    ) internal {\n        _certificateHistory[certificateId].push(StatusHistory({\n            timestamp: block.timestamp,\n            operator: operator,\n            status: status,\n            ipfsHash: ipfsHash\n        }));\n    }\n} "
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}